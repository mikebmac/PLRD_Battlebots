/*

  Demonstrates sending data packets of different length.  The receiver will check to see what size of
  packet was received and act accordingly.

  Radio    Arduino
  CE    -> 9
  CSN   -> 10 (Hardware SPI SS)
  MOSI  -> 11 (Hardware SPI MOSI)
  MISO  -> 12 (Hardware SPI MISO)
  SCK   -> 13 (Hardware SPI SCK)
  IRQ   -> No connection
  VCC   -> No more than 3.6 volts
  GND   -> GND

*/

#include <SPI.h>
#include <NRFLite.h>

#define JoyStick_X_PIN     A0
#define JoyStick_Y_PIN     A1
#define Weapon_PIN         2

const static uint8_t RADIO_ID = 5;
const static uint8_t DESTINATION_RADIO_ID = 6;
const static uint8_t PIN_RADIO_CE = 9;
const static uint8_t PIN_RADIO_CSN = 10;
const static uint8_t PIN_RADIO_IRQ = 3;

struct RadioPacket1
{
  uint8_t FromRadioId = 0;
  uint8_t joyX;
  uint8_t joyY;
  uint8_t weapon;
};


NRFLite _radio;
RadioPacket1 _radioData1;
volatile uint8_t _sendSucceeded, _sendFailed; // Note usage of volatile for these global variables being changed in the radio interrupt.

void setup()
{
  Serial.begin(115200);

  if (!_radio.init(RADIO_ID, PIN_RADIO_CE, PIN_RADIO_CSN))
  {
    Serial.println("Cannot communicate with radio");
    while (1); // Wait here forever.
  }
}

void loop()
{
  _radioData1.joyX = map(analogRead(JoyStick_Y_PIN), 374, 640, 0, 255);
  _radioData1.joyY = map(analogRead(JoyStick_X_PIN), 374, 640, 0, 255);
  _radioData1.weapon = digitalRead(Weapon_PIN);
  
  int str1 = (int)_radioData1.joyX;
  int str2 = (int)_radioData1.joyY;
  
  if (Serial) {
    Serial.print("Sending ");
    Serial.print(digitalRead(Weapon_PIN));
    Serial.print(" | ");
    Serial.print(str1);
    Serial.print(" | ");
    Serial.println(str2);
  }
  Serial.flush();

  if (_radio.send(DESTINATION_RADIO_ID, &_radioData1, sizeof(_radioData1)))
  {
    //Serial.println("...Success");
  }
  else
  {
    //Serial.println("...Failed");
  }

  delay(5);
}

void radioInterrupt()
{
    // Ask the radio what caused the interrupt.  This also resets the IRQ pin on the
    // radio so a new interrupt can be triggered.

    uint8_t txOk, txFail, rxReady;
    _radio.whatHappened(txOk, txFail, rxReady);

    // txOk = the radio successfully transmitted data.
    // txFail = the radio failed to transmit data.
    // rxReady = the radio received data.

    if (txOk)
    {
        _sendSucceeded = true;
    }
    
    if (txFail)
    {
        _sendFailed = true;
    }
}
